---
title: "tidy Tuesday"
format: html
editor: visual
---

```{r}
 # Get the Data

# Read in with tidytuesdayR package 
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest

# Either ISO-8601 date or year/week works!

tuesdata <- tidytuesdayR::tt_load('2023-06-20')
tuesdata <- tidytuesdayR::tt_load(2023, week = 25)

ufo_sightings <- tuesdata$`ufo_sightings`
places <- tuesdata$`places`
day_parts_map <- tuesdata$`day_parts_map`

# Or read in the data manually

ufo_sightings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/ufo_sightings.csv')
places <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/places.csv')
day_parts_map <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-06-20/day_parts_map.csv')
```

```{r}
# All packages used in this script:
library(tidyverse)
library(here)
library(withr)

url <- "https://github.com/jonthegeek/apis/raw/main/data/data_ufo_reports_with_day_part.rds"
ufo_path <- withr::local_tempfile(fileext = ".rds")
download.file(url, ufo_path)

ufo_data_original <- readRDS(ufo_path)

# We need to make the csv small enough that github won't choke. We'll pull out
# some of the joined data back into separate tables.

ufo_sightings <- ufo_data_original |> 
  dplyr::select(
    reported_date_time:city,
    state, 
    country_code,
    shape:has_images,
    day_part
  ) |> 
  # This got normalized after the data was saved, re-normalize.
  dplyr::mutate(
    shape = tolower(shape)
  )

places <- ufo_data_original |>
  dplyr::select(
    city:country_code, 
    latitude:elevation_m
  ) |> 
  dplyr::distinct()

# We'll also provide the map of "day parts" in case anybody wants to do
# something with that.
url2 <- "https://github.com/jonthegeek/apis/raw/main/data/data_day_parts_map.rds"
day_parts_path <- withr::local_tempfile(fileext = ".rds")
download.file(url2, day_parts_path)

day_parts_map <- readRDS(day_parts_path)

readr::write_csv(
  ufo_sightings,
  here::here(
    "data",
    "2023",
    "2023-06-20",
    "ufo_sightings.csv"
  )
)

readr::write_csv(
  places,
  here::here(
    "data",
    "2023",
    "2023-06-20",
    "places.csv"
  )
)

readr::write_csv(
  day_parts_map,
  here::here(
    "data",
    "2023",
    "2023-06-20",
    "day_parts_map.csv"
  )
)
```

```{r}

world_coordinates <- map_data("world")



cord_el <- ufo_data_original|>
  select(duration_seconds, longitude, latitude, shape)|>
  filter(duration_seconds < 7200)|>
  drop_na()
  
ggplot() +

geom_map(
	data = world_coordinates, map = world_coordinates,
	aes(long, lat, map_id = region),
	color = "white", fill = "grey", size = 0.3
) + 
  geom_point(data = cord_el,
             mapping = aes(x = longitude,
                           y = latitude,
                           color = duration_seconds),
             size = 0.5) + 
  scale_color_gradient(low = "lightblue",
                       high = "darkblue") + 
  labs(title = "UFO Sightings and Duration",
        subtitle = "World Map",
        fill = "Count") + 
  theme(panel.background = element_rect("black"),
         plot.background = element_rect("black"), 
         legend.background = element_rect("black"),
         legend.text = element_text(color = "white"),
         plot.title = element_text(family = "serif", 
                                   color = "white",
                                   size = 17),
         plot.subtitle = element_text(family = "serif", 
                                      color = "white",
                                      size = 13),
         legend.title = element_text(family = "serif", 
                                     color = "white"))
  

```

```{r}
world_coordinates <- map_data("world")



cord_el <- ufo_data_original|>
  select(duration_seconds, longitude, latitude, posted_date)|>
  filter(duration_seconds < 7200,
         posted_date >= as.Date("2022-01-01") & posted_date < as.Date("2023-01-01"))|>
  drop_na()
  
ggplot() +

geom_map(
	data = world_coordinates, map = world_coordinates,
	aes(long, lat, map_id = region),
	color = "white", fill = "grey", size = 0.3
) + 
  geom_point(data = cord_el,
             mapping = aes(x = longitude,
                           y = latitude,
                           color = posted_date),
             size = 0.5) + 
  scale_color_gradient(low = "lightblue",
                       high = "darkblue") + 
  labs(title = "UFO Sightings 2022 - 2023",
        subtitle = "World Map, Newer the Darker",
        fill = "Count") + 
  theme(panel.background = element_rect("black"),
         plot.background = element_rect("black"), 
         legend.background = element_rect("black"),
         legend.text = element_text(color = "white"),
         plot.title = element_text(family = "serif", 
                                   color = "white",
                                   size = 17),
         plot.subtitle = element_text(family = "serif", 
                                      color = "white",
                                      size = 13),
         legend.title = element_text(family = "serif", 
                                     color = "white"),
        legend.position = "none")
```

```{r}
ufo_data_original|>
  drop_na(duration_seconds, elevation_m)|>
  filter(duration_seconds < 7200 & duration_seconds > 5)|>
  #view()|>
  ggplot() + 
  geom_jitter(mapping = aes(x = duration_seconds,
                           y = elevation_m)) + 
   labs(title = "Elevation vs Duration",
        subtitle = "for all of the years",
        fill = "Count") +
   theme(panel.background = element_rect("grey"),
         plot.background = element_rect("grey"), 
         legend.background = element_rect("grey"),
         legend.text = element_text(color = "white"),
         plot.title = element_text(family = "serif", 
                                   color = "white",
                                   size = 17),
         plot.subtitle = element_text(family = "serif", 
                                      color = "white",
                                      size = 13),
         legend.title = element_text(family = "serif", 
                                     color = "white"))
```

```{r}
ufo_data_original|>
  group_by(shape)|>
  drop_na()|>
  summarize(count = n()) -> shape_count
  
  shape_count|>
    filter(count > 100)|>
    
    ggplot()+ 
    geom_col(mapping = aes(y = shape,
                           x = count),
             fill  = "white",
             orientation = "y")+
    labs(title = "Most common shape for UFO",
        subtitle = "Based on DATA since 1998",
        fill = "Count") +
   theme(panel.background = element_rect("grey40"),
         plot.background = element_rect("grey40"), 
         legend.background = element_rect("grey40"),
         legend.text = element_text(color = "white"),
         plot.title = element_text(family = "serif", 
                                   color = "white",
                                   size = 17),
         plot.subtitle = element_text(family = "serif", 
                                      color = "white",
                                      size = 13),
         legend.title = element_text(family = "serif", 
                                     color = "white"),
         axis.title.x = element_text(color = "white"),
         axis.text = element_text(color = "white"),
         panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
         plot.caption = element_text(color = "white",
                                     size = 5))+ 
          labs(y= "", x = "Total Cases",
               caption = "Graph created by Tomas Goncharenko depicting the most popular shape of UFO since 1998. The data was sourced from Tidy Tuesday.")
    
```

```{r}
ufo_data_original|>
  group_by(posted_date)|>
  drop_na()|>
  summarize(count = n()) -> case_count

case_count |>
  ggplot(mapping = aes(x = posted_date,
                          y = count)) + 
  geom_point() + 
  geom_smooth(color = "white") + 
  labs(title = "UFO cases on the time scale",
        subtitle = "In the World",
        fill = "Count") +
  labs(y= "cases per day", x = "x axis name") + 
  
   theme(panel.background = element_rect("#6e9598"),
         plot.background = element_rect("#6e9598"), 
         legend.background = element_rect("#6e9598"),
         legend.text = element_text(color = "white"),
         plot.title = element_text(family = "serif", 
                                   color = "white",
                                   size = 17),
         plot.subtitle = element_text(family = "serif", 
                                      color = "white",
                                      size = 13),
         legend.title = element_text(family = "serif", 
                                     color = "white"))
    
  
  
  
```

```{r}
ufo_data_original|>
  group_by(country)|>
  drop_na()|>
  summarise(count = n())|>
  
```

```{r}


world_coordinates|>
  filter(region == "USA", long < -50 & long > -135,
         lat < 50 & lat > 20) -> USA_coordinates

ufo_data_original|>
  filter(country == "USA", longitude < -50 & longitude > -135,
         latitude < 50 & latitude > 20)|>
ggplot() +

geom_map(
	data = USA_coordinates, map = USA_coordinates,
	aes(long, lat, map_id = region),
	color = "white", fill = "white", size = 0.3
) + 
  geom_jitter(mapping = aes(
    x = longitude,
    y = latitude,
    color = posted_date
  ),
  alpha = 0.5,
  size = 0.1
              )+
  
  scale_color_gradient(high = "yellow",
                       low = "red")+
   labs(title = "UFO cases in USA since 1998",
        subtitle = "Lighter points represent more recent citings",
        fill = "Count") +
  scale_fill_discrete(labels = c("Control", "Treatment 1", "Treatment 2")) + 
  theme(
    panel.background = element_rect("grey80"),
         plot.background = element_rect("grey80"), 
         legend.background = element_rect("grey80"),
         legend.text = element_text(color = "grey10"),
         plot.title = element_text(family = "serif", 
                                   color = "grey10",
                                   size = 17),
         plot.subtitle = element_text(family = "serif", 
                                      color = "grey10",
                                      size = 13),
      plot.subtitle = element_text(family = "serif", 
                                      color = "white",
                                      size = 13),
     plot.subtitle = element_text(family = "serif", 
                                      color = "white",
                                      size = 13),
         legend.position = "none") +
   labs(y= "", x = "",
        caption = "Graph created by Tomas Goncharenko depicting UFO across United States since 1998. The data was sourced from Tidy Tuesday.")



```

-   A title that concisely describes the major pattern shown

-   A subtitle that adds a bit more context ([see Wilke\'s chapter on titles and subtitles for more info](https://clauswilke.com/dataviz/figure-titles-captions.html "https://clauswilke.com/dataviz/figure-titles-captions.html"))

-   A caption that includes information about the data source and gives you author credit

-   At least two of the following (choose the two that make the most sense for your plot):

    -   A custom color palette

    -   Custom axis breaks and tick mark labels (consider learning about the [{scales} package](https://scales.r-lib.org "https://scales.r-lib.org/") for easy axis labeling)

    -   Text annotations to highlight important data points (most appropriate for scatter and line plots)

-   A non-default theme

    -   You can use one of the built-in themes, or you can create your own using the theme() function ([see here](https://ggplot2-book.org/themes.html#modifying-theme-components "https://ggplot2-book.org/themes.html#modifying-theme-components") for more guidance on creating fully custom themes)
